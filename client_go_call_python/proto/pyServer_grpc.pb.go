// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: pyServer.proto

package pyServerTest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PyTestService_GetTestPY_FullMethodName = "/pyServerTest.PyTestService/GetTestPY"
)

// PyTestServiceClient is the client API for PyTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PyTestServiceClient interface {
	GetTestPY(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type pyTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPyTestServiceClient(cc grpc.ClientConnInterface) PyTestServiceClient {
	return &pyTestServiceClient{cc}
}

func (c *pyTestServiceClient) GetTestPY(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, PyTestService_GetTestPY_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PyTestServiceServer is the server API for PyTestService service.
// All implementations must embed UnimplementedPyTestServiceServer
// for forward compatibility
type PyTestServiceServer interface {
	GetTestPY(context.Context, *TestRequest) (*TestResponse, error)
	mustEmbedUnimplementedPyTestServiceServer()
}

// UnimplementedPyTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPyTestServiceServer struct {
}

func (UnimplementedPyTestServiceServer) GetTestPY(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestPY not implemented")
}
func (UnimplementedPyTestServiceServer) mustEmbedUnimplementedPyTestServiceServer() {}

// UnsafePyTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PyTestServiceServer will
// result in compilation errors.
type UnsafePyTestServiceServer interface {
	mustEmbedUnimplementedPyTestServiceServer()
}

func RegisterPyTestServiceServer(s grpc.ServiceRegistrar, srv PyTestServiceServer) {
	s.RegisterService(&PyTestService_ServiceDesc, srv)
}

func _PyTestService_GetTestPY_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyTestServiceServer).GetTestPY(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PyTestService_GetTestPY_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyTestServiceServer).GetTestPY(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PyTestService_ServiceDesc is the grpc.ServiceDesc for PyTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PyTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pyServerTest.PyTestService",
	HandlerType: (*PyTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTestPY",
			Handler:    _PyTestService_GetTestPY_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pyServer.proto",
}
